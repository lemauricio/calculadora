//TODO iniciar projeto calculadora

Curso de Git:
Que o comando git cherry-pick pode trazer um commit específico para a branch atual;
Como encontrar o commit em que determinada alteração foi aplicada, utilizando o git bisect;
Como encontrar o responsável por determinada linha ou bloco de código, utilizando o git blame;
Que jamais devemos apontar um culpado por determinado bug. Uma equipe deve ser unida e se ajudar;
Que o comando git show {hash} mostra todas as alterações aplicadas pelo commit com o hash informado.


Visualizar grafico:
git log --graph



Chegou a hora de você pôr em prática o que foi visto na aula. Para isso, execute os passos listados abaixo.

Execute git log --graph e confira que, embora haja várias linhas de desenvolvimento, tudo começa e termina na linha da branch master;

Execute o comando git branch -d titulo para remover a branch titulo;

Execute o comando git branch -D novo-release para remover a branch novo-release, mesmo que ela tenha commits à frente do master;

Execute o comando git branch development para criar um nova branch de desenvolvimento chamado development;

Execute o comando git checkout development para passar a trabalhar na branch development;

Execute o comando git checkout -b feature/lista-cursos-cloud para criar um nova branch, chamada feature/lista-cursos-cloud;

Adicione o seguinte conteúdo após a lista de cursos de DevOps:

<h2>Cursos de Cloud:</h2>
<dl>
 <dt>Amazon EC2</dt>
 <dd>Faça um deploy da sua webapp com alta disponibilidade e escalabilidade.</dd>

 <dt>Amazon S3</dt>
 <dd>Manipule e armazene objetos na nuvem</dd>
</dl>COPIAR CÓDIGO
Execute git add index.html e git commit -m "Cursos de EC2 e S3 adicionados" para commitar esta alteração;

Adicione a esta lista os dois seguintes cursos:

 <dt>Amazon Elastic Beanstalk Parte 1</dt>
 <dd>Container Docker</dd>

 <dt>Amazon ECS</dt>
 <dd>Gerencie Docker na nuvem da AWS</dd>COPIAR CÓDIGO
Execute git add index.html e git commit -m "Cursos de Beanstalk e ECS adicionados" para commitar esta alteração;

Execute git checkout development para voltar para a branch de desenvolvimento;

Execute git checkout -b feature/lista-cursos-linux para passar a trabalhar em um nova branch, chamada feature/lista-cursos-linux;

Adicione o seguinte conteúdo após a lista de cursos de DevOps:

<h2>Cursos de Linux:</h2>
<dl>
<dt>Linux I</dt>
<dd>Conhecendo e utilizando o terminal</dd>

<dt>Linux II</dt>
<dd>Programas, processos e pacotes</dd>
</dl>COPIAR CÓDIGO
Execute git add index.html e git commit -m "Cursos de Linux I e II adicionados" para commitar esta alteração;

Execute git checkout development para voltar para a branch de desenvolvimento;

Execute o comando git branch para conferir quantas e quais branches você têm criadas atualmente;

Execute o comando git merge feature/lista-cursos-linux para trazer os cursos de Linux para a branch de desenvolvimento;

Execute o comando git checkout feature/lista-cursos-cloud para voltar à branch feature/lista-cursos-cloud;

Adicione, à lista de cursos de Cloud, o seguinte curso:

<dt>Google Cloud</dt>
<dd>Deploy de uma aplicação em Spring MVC</dd>COPIAR CÓDIGO
Execute git add index.html e git commit -m "Curso de Google Cloud adicionado" para commitar esta alteração;

Execute git checkout development para voltar para a branch de desenvolvimento;

Execute o comando git merge feature/lista-cursos-cloud para trazer os cursos de Cloud para a branch de desenvolvimento;

Resolva o conflito mantendo as duas listas novas de cursos;

Execute git add index.html e git commit para continuar o processo de merge;

Volte para a branch master com o comando git checkout master;

Trabalhe em um nova branch, chamada hotfix/v0.1.1, utilizando o comando git checkout -b hotfix/v0.1.1;

Altere o título da página (na tag <title>) para "Lista de cursos";

Execute git add index.html e git commit -m "Removendo o nome da Alura do título" para commitar esta alteração;

Volte para a branch master, com o comando git checkout master;

Una o trabalho do hotfix, com o comando git merge hotfix/v0.1.1;

Crie uma nova tag que representa uma nova versão, utilizando o comando git tag -a v0.1.1 -m "Versão com correção no título";

Vá para a branch de desenvolvimento com git checkout development;

Traga a correção do bug com git merge hotfix/v0.1.1;

Crie um nova branch, chamada de release/v0.2.0, com o comando git checkout -b release/v0.2.0;

Adicione os dois seguintes cursos na lista de cursos de Linux:

<dt>Shell Script I</dt>
<dd>Começando seus scripts de automação de tarefas</dd>COPIAR CÓDIGO
<dt>Shell Script II</dt>
<dd>Fazendo monitoramento, agendando tarefas e backup</dd>COPIAR CÓDIGO
Execute git add index.html e git commit -m "Corrigindo bug: Cursos de Shell faltantes" para commitar esta alteração;

Volte para a branch master, com o comando git checkout master;

Una todo o trabalho referente à nova release, com git merge release/v0.2.0;

Crie uma nova tag que representa uma nova versão, utilizando o comando git tag -a v0.2.0 -m "Novas listas adicionadas";

Execute o comando git branch e confira todos as branches criadas neste processo;
