//TODO iniciar projeto calculadora

Curso de Git:
Que o comando git cherry-pick pode trazer um commit específico para a branch atual;
Como encontrar o commit em que determinada alteração foi aplicada, utilizando o git bisect;
Como encontrar o responsável por determinada linha ou bloco de código, utilizando o git blame;
Que jamais devemos apontar um culpado por determinado bug. Uma equipe deve ser unida e se ajudar;
Que o comando git show {hash} mostra todas as alterações aplicadas pelo commit com o hash informado.


Visualizar grafico:
git log --graph



Chegou a hora de você pôr em prática o que foi visto na aula. Para isso, execute os passos listados abaixo.

Execute git log --graph e confira que, embora haja várias linhas de desenvolvimento, tudo começa e termina na linha da branch master;

Execute o comando git branch -d titulo para remover a branch titulo;

Execute o comando git branch -D novo-release para remover a branch novo-release, mesmo que ela tenha commits à frente do master;

Execute o comando git branch development para criar um nova branch de desenvolvimento chamado development;

Execute o comando git checkout development para passar a trabalhar na branch development;

Execute o comando git checkout -b feature/lista-cursos-cloud para criar um nova branch, chamada feature/lista-cursos-cloud;

Adicione o seguinte conteúdo após a lista de cursos de DevOps:

<h2>Cursos de Cloud:</h2>
<dl>
 <dt>Amazon EC2</dt>
 <dd>Faça um deploy da sua webapp com alta disponibilidade e escalabilidade.</dd>

 <dt>Amazon S3</dt>
 <dd>Manipule e armazene objetos na nuvem</dd>
</dl>COPIAR CÓDIGO
Execute git add index.html e git commit -m "Cursos de EC2 e S3 adicionados" para commitar esta alteração;

Adicione a esta lista os dois seguintes cursos:

 <dt>Amazon Elastic Beanstalk Parte 1</dt>
 <dd>Container Docker</dd>

 <dt>Amazon ECS</dt>
 <dd>Gerencie Docker na nuvem da AWS</dd>COPIAR CÓDIGO
Execute git add index.html e git commit -m "Cursos de Beanstalk e ECS adicionados" para commitar esta alteração;

Execute git checkout development para voltar para a branch de desenvolvimento;

Execute git checkout -b feature/lista-cursos-linux para passar a trabalhar em um nova branch, chamada feature/lista-cursos-linux;

Adicione o seguinte conteúdo após a lista de cursos de DevOps:

<h2>Cursos de Linux:</h2>
<dl>
<dt>Linux I</dt>
<dd>Conhecendo e utilizando o terminal</dd>

<dt>Linux II</dt>
<dd>Programas, processos e pacotes</dd>
</dl>COPIAR CÓDIGO
Execute git add index.html e git commit -m "Cursos de Linux I e II adicionados" para commitar esta alteração;

Execute git checkout development para voltar para a branch de desenvolvimento;

Execute o comando git branch para conferir quantas e quais branches você têm criadas atualmente;

Execute o comando git merge feature/lista-cursos-linux para trazer os cursos de Linux para a branch de desenvolvimento;

Execute o comando git checkout feature/lista-cursos-cloud para voltar à branch feature/lista-cursos-cloud;

Adicione, à lista de cursos de Cloud, o seguinte curso:

<dt>Google Cloud</dt>
<dd>Deploy de uma aplicação em Spring MVC</dd>COPIAR CÓDIGO
Execute git add index.html e git commit -m "Curso de Google Cloud adicionado" para commitar esta alteração;

Execute git checkout development para voltar para a branch de desenvolvimento;

Execute o comando git merge feature/lista-cursos-cloud para trazer os cursos de Cloud para a branch de desenvolvimento;

Resolva o conflito mantendo as duas listas novas de cursos;

Execute git add index.html e git commit para continuar o processo de merge;

Volte para a branch master com o comando git checkout master;

Trabalhe em um nova branch, chamada hotfix/v0.1.1, utilizando o comando git checkout -b hotfix/v0.1.1;

Altere o título da página (na tag <title>) para "Lista de cursos";

Execute git add index.html e git commit -m "Removendo o nome da Alura do título" para commitar esta alteração;

Volte para a branch master, com o comando git checkout master;

Una o trabalho do hotfix, com o comando git merge hotfix/v0.1.1;

Crie uma nova tag que representa uma nova versão, utilizando o comando git tag -a v0.1.1 -m "Versão com correção no título";

Vá para a branch de desenvolvimento com git checkout development;

Traga a correção do bug com git merge hotfix/v0.1.1;

Crie um nova branch, chamada de release/v0.2.0, com o comando git checkout -b release/v0.2.0;

Adicione os dois seguintes cursos na lista de cursos de Linux:

<dt>Shell Script I</dt>
<dd>Começando seus scripts de automação de tarefas</dd>COPIAR CÓDIGO
<dt>Shell Script II</dt>
<dd>Fazendo monitoramento, agendando tarefas e backup</dd>COPIAR CÓDIGO
Execute git add index.html e git commit -m "Corrigindo bug: Cursos de Shell faltantes" para commitar esta alteração;

Volte para a branch master, com o comando git checkout master;

Una todo o trabalho referente à nova release, com git merge release/v0.2.0;

Crie uma nova tag que representa uma nova versão, utilizando o comando git tag -a v0.2.0 -m "Novas listas adicionadas";

Execute o comando git branch e confira todos as branches criadas neste processo;











esta aula, aprendemos:

Que é uma convenção bem seguida que a branch master tenha apenas os commits prontos para ir para produção;
Que não é interessante realizar trabalho e commitar diretamente na branch master;
Como remover uma branch:
git branch -d {nome_branch} remove uma branch que já tem seu trabalho unido à branch atual;
git branch -D {nome_branch} remove uma branch mesmo que os commits desta branch ainda não estejam na branch atual, ou seja, força a remoção;
Um pouco do processo chamado de Git Flow:
Entendemos que o estado do código representado pela branch master deve ser o mesmo que estará em produção
Vimos que deve haver uma branch de desenvolvimento (comumente chamado de develop), onde todas as funcionalidades e correções devem ser muito bem testadas antes de ir para produção (master)
Vimos que cada funcionalidade deve ser feita em uma branch separada, e que é comum que esta branch tenha feature/ como prefixo
Aprendemos também que bugs normalmente são corrigidos em branches separadas, com o prefixo hotfix/
Além disso, branches específicas para cada release são criadas para realizar os testes e correções de bugs específicos



git cola - ferramenta grafica leve

https://www.gitkraken.com/ - ferramenta grafica completa

Que há ferramentas visuais que podem nos auxiliar com o trabalho com o Git;
O Git Cola foi uma das primeiras ferramentas visuais multiplataforma. Embora não seja a mais complexa ou visualmente atraente, é bem completa e pode nos ajudar bastante;
O GitHub Desktop pode ser interessante para gerenciar os projetos do GitHub de forma mais ágil e facilitada, sem a necessidade de acessar o site;
O GitKraken é uma ferramenta extremamente completa, que nos auxilia inclusive com a implementação do Git Flow.








Chegou a hora de você pôr em prática o que foi visto na aula. Para isso, execute os passos listados abaixo.

Acesse o site https://git-cola.github.io/downloads.html e realize o download e instalação do Git Cola;

Abra o Git Cola e selecione o seu repositório, para que o programa possa gerenciar as alterações;

Em seu repositório, adicione dois pontos (:) após cada título das listas de cursos;

No Git Cola, aguarde alguns segundos e observe que a sua alteração já pode ser visualizada;

Com o botão direito do mouse, clique no arquivo modificado e clique em Stage Selecionado, para realizar o trabalho equivalente ao git add;

Escreva uma mensagem de commit e clique no botão Commit;

No menu Ver, clique em Visualizar Histórico e confira uma visualização mais interessante do seu log;

No menu Ações, clique em Push para enviar as alterações para o seu repositório remoto, de nome local, na branch master;

Instale o GitHub Desktop:

9.1. Se você estiver no Windows ou macOS, acesse https://desktop.github.com/ para instalá-lo;

9.2. Se você estiver utilizando Linux, acesse https://github.com/shiftkey/desktop para baixar e instalar;

Faça login com o seu usuário e preencha os dados de configuração;

Se familiarize com a interface do GitHub Desktop;

Acesse o site https://www.gitkraken.com/download para realizar o download e instalar o Git Kraken;

Após instalado, faça login utilizando o seu usuário do GitHub (ou crie uma nova conta, se preferir);

Clique em Open a Repo para abrir o seu repositório;

Clique no botão Pull para trazer todas as alterações do repositório remoto;

Analise e se familiarize com a interface do Git Kraken;

Clique no ícone de menu no canto superior direito da interface, e depois clique em Preferences;

Na tela que abrir, vá para a aba Git Flow. Analise as opções, altere caso desejar, e depois clique em Initialize Git Flow;

No canto esquerdo da tela principal do programa, na parte Git Flow, clique na seta para a direita que é exibida, e então clique em Feature;

Defina o nome da branch que será criada como feature/lista-cursos-redes;

Clique em Start Feature. O Git Kraken irá criar esta branch para você;

No código fonte, adicione o seguinte conteúdo:

<h2>Redes</h2>
<dl>
<dt>Redes 1</dt>
<dd>Introdução, Conceitos e Prática</dd>

<dt>Redes 2</dt>
<dd>Montando um projeto do cliente até o provedor de serviços</dd>
</dl>COPIAR CÓDIGO
No canto direito da tela, clique no botão Stage all changes para adicionar as alterações que deverão ser commitadas;

Logo abaixo, defina a mensagem de commit como "Lista de cursos de redes" e clique em Commit changes;

Novamente no canto esquerdo, na aba Git Flow, clique na seta para a direita, e clique no botão Finish feature/lista-cursos-redes;

Clique no botão Finish feature para que o Git Kraken faça o merge para a branch develop e remova a branch atual;
